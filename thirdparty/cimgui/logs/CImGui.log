`/bin/bash -c "alias ll='ls -la'

vecho() {
    if [[ \"false\" == \"true\" ]]; then
        echo \"\$@\"
    fi
}
vecho_red() {
    (vecho \"\$@\" >&2)
}

# Save bash history (and optionally echo it out as it happens)
save_history() {
    vecho_red \" ---> \$BASH_COMMAND\"
    history -s \"\$BASH_COMMAND\"
    history -a
}

# Save our environment into \`/meta/.env\`, eliminating read-only variables
# so that this file can be sourced upon entering a debug shell.
save_env() {
    set +x
    set > /meta/.env
    # Ignore read-only variables
    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do
        grep -v \"^\$l=\" /meta/.env > /meta/.env2
        mv /meta/.env2 /meta/.env
    done
    echo \"cd \$(pwd)\" >> /meta/.env
}

# We do a little sleight-of-hand here; we want to build inside of a tmpfs
# because \`srcdir\` might be mapped in through a networked filesystem, which
# totally wrecks our I/O performance.  So what we do instead is bind-mount
# \`srcdir\` to another location so that we can always get at it, copy its
# contents to a new tmpfs we mount at the location of \`srcdir\`, then when
# we exit on an error, we copy everything back over again
tmpify_srcdir() {
    vecho \"Copying srcdir to tmpfs...\"
    mkdir -p \$WORKSPACE/.true_srcdir
    mount --bind \$WORKSPACE/srcdir \$WORKSPACE/.true_srcdir
    mount -t tmpfs tmpfs \$WORKSPACE/srcdir
    rsync -rlptD \$WORKSPACE/.true_srcdir/ \$WORKSPACE/srcdir

    # We may have changed what pwd() means out from underneath ourselves
    cd \$(pwd)
}

# Copy our tmpfs version of \`srcdir\` back onto disk.
save_srcdir() {
    vecho_red \"Saving srcdir due to previous error...\"
    rsync -rlptD \$WORKSPACE/srcdir/ \$WORKSPACE/.true_srcdir --delete
}

# If /meta is mounted, then we want to save history and environment
if [[ -d /meta ]]; then
    trap save_history DEBUG
    trap \"save_env\" EXIT
    trap \"save_env; save_srcdir\" INT TERM ERR
fi

# Stop if we hit any errors.
set -e

# Swap out srcdir from underneath our feet
tmpify_srcdir

cd \$WORKSPACE/srcdir
mv imgui cimgui/
mv helper.c cimgui/
mv helper.h cimgui/
cd cimgui/
rm CMakeLists.txt
mv ../CMakeLists.txt ./
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=\${prefix} -DCMAKE_TOOLCHAIN_FILE=/opt/\${target}/\${target}.toolchain
make
make install

"`
-- The C compiler identification is GNU 4.8.5
-- The CXX compiler identification is GNU 4.8.5
-- Check for working C compiler: /opt/i686-w64-mingw32/bin/i686-w64-mingw32-gcc
-- Check for working C compiler: /opt/i686-w64-mingw32/bin/i686-w64-mingw32-gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /opt/i686-w64-mingw32/bin/i686-w64-mingw32-g++
-- Check for working CXX compiler: /opt/i686-w64-mingw32/bin/i686-w64-mingw32-g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Configuring done
-- Generating done
-- Build files have been written to: /workspace/srcdir/cimgui/build
Scanning dependencies of target cimgui
[ 12%] Building CXX object CMakeFiles/cimgui.dir/cimgui.cpp.obj
[ 25%] Building CXX object CMakeFiles/cimgui.dir/imgui/imgui.cpp.obj
[ 37%] Building CXX object CMakeFiles/cimgui.dir/imgui/imgui_draw.cpp.obj
[ 50%] Building CXX object CMakeFiles/cimgui.dir/imgui/imgui_demo.cpp.obj
[ 62%] Building CXX object CMakeFiles/cimgui.dir/imgui/imgui_widgets.cpp.obj
[ 75%] Linking CXX shared library libcimgui.dll
[ 75%] Built target cimgui
Scanning dependencies of target cimgui_helper
[ 87%] Building C object CMakeFiles/cimgui_helper.dir/helper.c.obj
[100%] Linking C shared library libcimgui_helper.dll
[100%] Built target cimgui_helper
[ 75%] Built target cimgui
[100%] Built target cimgui_helper
Install the project...
-- Install configuration: ""
-- Installing: /workspace/destdir/lib/libcimgui.dll.a
-- Installing: /workspace/destdir/bin/libcimgui.dll
-- Installing: /workspace/destdir/include/cimgui.h
-- Installing: /workspace/destdir/lib/static/libcimgui_helper.dll.a
-- Installing: /workspace/destdir/bin/libcimgui_helper.dll
-- Installing: /workspace/destdir/include/helper.h
